// --- Standard Library Imports ---
import fs from "fs";
import https from "https";
import path from "path"; // Good for cross-platform path handling

// --- Third-Party Imports ---
import express from "express";
import * as line from "@line/bot-sdk"; // Import the official LINE SDK

// --- Custom Module Imports ---
import { createEventHandler } from "./module/eventHandler.js"; // ðŸ‘ˆ Import your new handler factory

// --- Environment Variable Validation ---
const requiredEnv = [
  "PORT",
  "LINE_CHANNEL_ACCESS_TOKEN",
  "LINE_CHANNEL_SECRET",
  "USER_DB_APIKEY",
  "HOSXP_APIKEY",
  "LOGIC_SERVER_APIKEY",
  "LOGIC_SERVER_URL",
  "USERDB_API_URL",
  "HOSxP_API_URL",
];

for (const R_env of requiredEnv) {
  if (!process.env[R_env]) {
    console.error(`[Fatal Error] Environment variable ${R_env} is not set.`);
    process.exit(1); // Exit if critical config is missing
  }
}

// --- LINE SDK Configuration ---
const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

// --- App & Server Setup ---
const app = express();
const client = new line.Client(lineConfig); // Create LINE client

// --- HTTPS Server Options ---
// Use path.join for robust file paths
const options = {
  key: fs.readFileSync(path.join("./cert", "line-webhook-server.key")),
  cert: fs.readFileSync(path.join("./cert", "line-webhook-server.crt")),
};

// --- âœ¨ Create the Event Handler âœ¨ ---
// Pass all the dependencies your logic needs into the factory
const handleEvent = createEventHandler({
  client: client,
  logicServerUrl: process.env.LOGIC_SERVER_URL,
  logicServerApiKey: process.env.LOGIC_SERVER_APIKEY,
  userdbApiUrl: process.env.USERDB_API_URL,
  userdbApiKey: process.env.USER_DB_APIKEY,
  hosxpApiUrl: process.env.HOSxP_API_URL,
  hosxpApiKey: process.env.HOSXP_APIKEY,
});

// --- Webhook Route ---
// Use the LINE middleware to handle signature validation and body parsing
app.post("/chatbot", line.middleware(lineConfig), async (req, res) => {
  try {
    // Process all events in the request
    const events = req.body.events;
    const results = await Promise.all(events.map(handleEvent));

    // Send a 200 OK to LINE
    res.status(200).json(results);

  } catch (err) {
    console.error("Error processing webhook:", err.message, err.stack);
    // CRITICAL: Always send a 200 OK, even on failure.
    // Otherwise, LINE will retry and spam your webhook.
    // Log the error for debugging.
    res.sendStatus(200);
  }
});

// --- Server Start ---
const port = process.env.PORT;
const server = https.createServer(options, app);

server.listen(port, () => {
  console.log(`âœ… App listening on HTTPS PORT: ${port}`);
});