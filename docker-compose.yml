services:

  # Proxy Server
  proxy-server:
    image: nginx:alpine
    container_name: proxy-server
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=Asia/Bangkok # Replace with your desired timezone      
    volumes:
      - ./proxy-server/nginx.conf:/etc/nginx/nginx.conf:ro # Mount Nginx configuration
      - ./certs/proxy-server.crt:/etc/nginx/certs/proxy-server.crt:ro # Mount the bundle as read-only 
      - ./certs/proxy-server.key:/etc/nginx/certs/proxy-server.key:ro # Mount the bundle as read-only       
    depends_on:
      - user-db-api      
    networks:
      - app-network

  # Node.js frontend Server Service
  line-providerid-link-frontend:
    build:
      context: ./line-providerid-link-frontend # Path to the Dockerfile and source code
      dockerfile: Dockerfile
    container_name: line-providerid-link-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./certs/combine_cert.pem:/usr/src/app/cert/combine_cert.pem:ro # Mount the bundle as read-only
      - ./certs/line-providerid-link-frontend.crt:/usr/src/app/cert/line-providerid-link-frontend.crt:ro # Mount the bundle as read-only 
      - ./certs/line-providerid-link-frontend.key:/usr/src/app/cert/line-providerid-link-frontend.key:ro # Mount the bundle as read-only      
    environment:
      - NODE_ENV=production
      - TZ=Asia/Bangkok # Replace with your desired timezone
      - NODE_EXTRA_CA_CERTS=/usr/src/app/cert/combine_cert.pem      
    depends_on:
      proxy-server:
        condition: service_started
    networks:
      - app-network

  # Node.js backend Server Service
  line-providerid-link-backend:
    build:
      context: ./line-providerid-link-backend # Path to the Dockerfile and source code
      dockerfile: Dockerfile
    container_name: line-providerid-link-backend
    ports:
      - "3002:3002"
    volumes:
      - ./certs/combine_cert.pem:/usr/src/app/cert/combine_cert.pem:ro # Mount the bundle as read-only
      - ./certs/line-providerid-link-backend.crt:/usr/src/app/cert/line-providerid-link-backend.crt:ro # Mount the bundle as read-only 
      - ./certs/line-providerid-link-backend.key:/usr/src/app/cert/line-providerid-link-backend.key:ro # Mount the bundle as read-only   
    environment:
      - NODE_ENV=production
      - TZ=Asia/Bangkok # Replace with your desired timezone
      - NODE_EXTRA_CA_CERTS=/usr/src/app/cert/combine_cert.pem
    depends_on:
      proxy-server:
        condition: service_started
    networks:
      - app-network      

  # HOSxP API Server Service
  hosxp-api:
    build:
      context: ./hosxp-api # Path to the Dockerfile and source code
      dockerfile: Dockerfile
    container_name: hosxp-api
    ports:
      - "3001:3001"
    volumes:
      - ./certs/combine_cert.pem:/usr/src/app/cert/combine_cert.pem:ro # Mount the bundle as read-only
      - ./certs/hosxp-api.crt:/usr/src/app/cert/hosxp-api.crt:ro # Mount the bundle as read-only 
      - ./certs/hosxp-api.key:/usr/src/app/cert/hosxp-api.key:ro # Mount the bundle as read-only 
      - ./keys/public-key/hosxp-api-public-key.pem:/usr/src/app/public-key/hosxp-api-public-key.pem:ro
    environment:
      - NODE_ENV=production
      - TZ=Asia/Bangkok # Replace with your desired timezone
      - NODE_EXTRA_CA_CERTS=/usr/src/app/cert/combine_cert.pem      
    depends_on:
      proxy-server:
        condition: service_started
    networks:
      - app-network

  # Line Webhook Server Service
  line-webhook-server:
    build:
      context: ./line-webhook-server # Path to the Dockerfile and source code
      dockerfile: Dockerfile
    container_name: line-webhook-server
    ports:
      - "3004:3004"
    volumes:
      - ./certs/combine_cert.pem:/usr/src/app/cert/combine_cert.pem:ro # Mount the bundle as read-only
      - ./certs/line-webhook-server.crt:/usr/src/app/cert/line-webhook-server.crt:ro # Mount the bundle as read-only 
      - ./certs/line-webhook-server.key:/usr/src/app/cert/line-webhook-server.key:ro # Mount the bundle as read-only       
    environment:
      - NODE_ENV=production
      - TZ=Asia/Bangkok # Replace with your desired timezone
      - NODE_EXTRA_CA_CERTS=/usr/src/app/cert/combine_cert.pem      
    depends_on:
      proxy-server:
        condition: service_started
    networks:
      - app-network

  # User DB API Server Service
  user-db-api:
    build:
      context: ./user-db-api # Path to the Dockerfile and source code
      dockerfile: Dockerfile
    container_name: user-db-api
    ports:
      - "3003:3003"
    volumes:
      - ./certs/combine_cert.pem:/usr/src/app/cert/combine_cert.pem:ro # Mount the bundle as read-only
      - ./certs/user-db-api.crt:/usr/src/app/cert/user-db-api.crt:ro # Mount the bundle as read-only 
      - ./certs/user-db-api.key:/usr/src/app/cert/user-db-api.key:ro # Mount the bundle as read-only
      - ./keys/public-key/user-db-api-public-key.pem:/usr/src/app/public-key/user-db-api-public-key.pem:ro      
    depends_on:
      user-db:
        condition: service_healthy      
    environment:
      - NODE_ENV=production
      - TZ=Asia/Bangkok # Replace with your desired timezone
      - NODE_EXTRA_CA_CERTS=/usr/src/app/cert/combine_cert.pem
    networks:
      - app-network

  # User DB MySQL Server
  user-db:
    image: mysql:9
    container_name: user-db
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 --password="$$(cat /run/secrets/mysql-root-password)" --silent']
      interval: 3s
      retries: 5
      start_period: 30s
    secrets:
      - mysql-root-password
      - mysql-user-password
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql-root-password
      - MYSQL_DATABASE=user_db
      - MYSQL_USER=nakorn
      - MYSQL_PASSWORD_FILE=/run/secrets/mysql-user-password
      - TZ=Asia/Bangkok # Replace with your desired timezone
    ports:
      - "3306:3306"
    volumes:
      - ./user-db/my.cnf:/etc/mysql/my.cnf
      - ./user-db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - user-data:/var/lib/mysql
    networks:
      - app-network

networks:
  app-network:
    name: app-network
    driver: bridge
  db-network:
    name: db-network
    driver: bridge
  api-network:
    name: api-network
    driver: bridge

volumes:
  user-data:
    name: user-data

secrets:
  mysql-root-password:
    file: ./user-db/MySQL_root.password
  mysql-user-password:
    file: ./user-db/MySQL_user.password    